Let's do this!

Our Git repository is hosted in GitHub so we will use GitHub Actions for our CI (Continuous Integration) pipeline.

Create our workflow:
$ mkdir .github/workflows
$ cd .github/workflows
Inside it, create goreleaser.yml file with this content:
name: goreleaser

on:
  push:
    tags:
      - '*'

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          distribution: goreleaser
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
This workflow contains one job that we'll checkout the repository, package our app with GoReleaser and generate a GitHub release.

/!\ In order to release to GitHub, GoReleaser need a valid GitHub token with the repo scope. Fortunately, GitHub automatically creates a GITHUB_TOKEN secret to use in a workflow.

After pushed your modification in the Git repository, now we can create a Git tag and push it:
$ git tag -a v1.0.0 -m "First release"

$ git push --tags
Ã‰numÃ©ration des objets: 1, fait.
DÃ©compte des objets: 100% (1/1), fait.
Ã‰criture des objets: 100% (1/1), 157 octets | 157.00 Kio/s, fait.
Total 1 (delta 0), rÃ©utilisÃ©s 0 (delta 0), rÃ©utilisÃ©s du pack 0
To https://github.com/scraly/gophersay.git
 * [new tag]         v1.0.0 -> v1.0.0
Let's go in our GitHub repository, and click on "Actions" tab in order to watch running, failed and successfull workflows:

Gh actions

Perfect, our workflow successfully runned.

A new GitHub release have been automatically created:
GH release

GH release details

So now, each time I will update my app and create a Git tag and push it, automatically a new (GitHub) GH release will be created with cross-platform binaries :-).

Thanks
If you like this article/tutorial and the cute gophersay app, don't hesitate to add a star on GitHub :-)

GitHub logo scraly / gophersay
GopherSay allow you to display a message said by a cute random Gopher.
GopherSay
GitHub release Code Status

About
Welcome in GopherSay!

GopherSay is inspired by Cowsay program.

GopherSay allow you to display a message said by a cute random Gopher.

Installation
For MacOS:

brew tap scraly/tools
brew install gophersay
Pre-requisites
Install Go in 1.16 version minimum.

Build the app
$ go build -o bin/gophersay main.go

or

$ task build

Run the app
$ ./bin/gophersay

or

$ task run

Test the app
$ ./bin/gophersay Hello Gopher lovers
 ---------------------
< Hello Gopher lovers! >
 ---------------------
        \
         \
                                          ,
                             (%..**,,,,,.& .,,.**
                            ,%,*..,,,. .** **.,*,,**./
                           ./*,,.. .**,.,..,.,**.**..(.
                      .   (@.,*%.**.,,**,.,,%*..**,*,/(
                  ,..../../&&%................%///#.,***.....
                   /....,..........................@*@%...,.,
                     .....................................,
                    &*   #@................................
                 &           ...............................
                #             .........................%       @
               /@     @,      ........................*          *
              *.,            @.......................@    /@@
             /....%        ..........................&
            /........%@@..............................%         %
           ,....................................................*   *   .%
           .........................@,,,,,,,@...................* @   *****#
          *........................@,,,,,,/&(...................  /. ****,**
         ........................@,,,,,,,,,,,, ................/ #/////( ,*,
         //.....................@,,,,,,,,,,,,#................., #//////////
      ...........................,@@@   /  @................../....**//////(
      ...,.........................@@      @.......................///*//*/(
         ...........................&@@@@@@..................   @///////////
         ,..................................................*   @///////&* *
         /..................................................    @/@..,(@.& (
         ,.................................................     @ @/ .(#   .
          ................................................,     @ ,.%(#,**
          .............................................../      @ . @////*/
â€¦
View on GitHub
Conclusion
As you have seen in this article and previous articles, it's possible to create multiple different applications in Go... and to automatize build and cross-compilation.
This time we didn't use Cobra, Viper and other frameworks because I wanted to show you we ca do a very small CLI without it :-).

All the code of our GopherSay app in Go is available in: https://github.com/scraly/gophersay

In the following articles we will create others kind/types of applications in Go.

Hope you'll like it.

Learning Go by examples (13 Part Series)
1
Learning Go by examples: part 1 - Introduction & Installation
2
Learning Go by examples: part 2 - Create an HTTP REST API Server in Go
...
9 more parts...
12
Learning Go by examples: part 12 - Deploy Go apps in Go with Pulumi
13
Learning Go by examples: part 12 - Deploy Go apps in Go with CDK for Terraform (CDKTF)
ðŸ‘‹ Kindness is contagious

Please leave your appreciation by commenting on this post!

It takes one minute and is worth it for your career.

Get started

Thank you!

Top comments (4)
Subscribe
pic
Add to the discussion
 
 
streamdp profile image
Alexandr Primak
â€¢
29 Sept 21

thank you very much. this is a great coursegendalf-colored


2
Like
 
 
aurelievache profile image
AurÃ©lie Vache
â€¢
2 Oct 21

Thanks Alexandr


2
Like
 
 
golangch profile image
Stefan Wuthrich
â€¢
4 Sept 21

congrats to this really great series and this new article.
Here you Go:
twitter.com/golangch/status/143396...


2
Like
 
 
arunmurugan78 profile image
Arun Murugan
â€¢
5 Sept 21

Thanks for posting!


2
Like
Code of Conduct â€¢ Report abuse
profile
Pieces.app
PROMOTED

A Workflow Copilot. Tailored to You.
Pieces.app image

Our desktop app, with its intelligent copilot, streamlines coding by generating snippets, extracting code from screenshots, and accelerating problem-solving.

Read the docs

Read next
bwca profile image
Reducing the Boilerplate for Services Utilizing Subjects in Angular
Volodymyr Yepishev - May 7

mitchiemt11 profile image
Custom Fonts In React Native: Pro Tip!
Mitchell Mutandah - May 7

mike_andreuzza profile image
How to creat a contextual menu with Tailwind CSS and Alpinejs
Michael Andreuzza - May 8

paulund profile image
How to debug axios requests
Paulund - Apr 15


AurÃ©lie Vache
Follow
DevRel - Docker captain - CNCF Ambassador - Google Cloud Developer Expert - CKAD - Speaker - Sketchnoter - Technical writer - Conferences organizer - Women in tech association Leader - Mentor
LOCATION
Toulouse, France
WORK
Developer Advocate at OVHcloud
JOINED
12 Mar 2017
More from AurÃ©lie Vache
Understanding Kubernetes: part 51 â€“ Kubernetes 1.30 Changelog
#kubernetes #devops #docker #beginners
Understanding Go: part 10 â€“ Struct
#go #tutorial #beginners
Understanding Go: part 9 â€“ Slice
#go #tutorial #beginners
profile
AWS
PROMOTED

Build On AWS Stream

This isnâ€™t your average security show
Making security fun one episode at a time

Join AWS and AWS Partners live, every other Wednesday at 8AM PT, as they bring some levity to common security topics and challenges without the sales pitches and boring buzzwords.

Learn More

name: goreleaser

on:
  push:
    tags:
      - '*'

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          distribution: goreleaser
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}